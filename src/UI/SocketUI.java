/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Entities.LogOccurrence;
import Enum.LogLevel;
import UserConfig.UserProperties;
import Utils.HostConfig;
import static Utils.HostConfig.getLogFormat;
import static Utils.HostConfig.permitirLogGeracao;
import Utils.RoundedBorder;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author Mauros
 */
public class SocketUI extends javax.swing.JFrame {

    private ArrayList<LogOccurrence> LogArray = new ArrayList<>();

    /**
     * Creates new form SocketUI
     */
    public SocketUI() {
        long inicio = System.nanoTime(); // Marca o tempo no começo do construtor

        initComponents();
        addLog(LogLevel.INFO, "Inicializando componentes");
        setLayout(null);
        this.initImg();
        inicializaFTF();
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                // Ao fechar a janela principal, abre novamente o LoginForm
                new LoginForm().setVisible(true);
            }
        });

        setLocationRelativeTo(null);

        // Usa SwingUtilities para garantir que a UI esteja renderizada
        SwingUtilities.invokeLater(() -> {
            long fim = System.nanoTime();
            long tempoMs = (fim - inicio) / 1_000_000;
            addLog(LogLevel.DEBUG, "Montagem da tela finalizada em " + tempoMs + " ms");
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        systemL = new javax.swing.JLabel();
        remoteHostL = new javax.swing.JLabel();
        rHostPortTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        rHostTF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        areaFocoRHost = new javax.swing.JLabel();
        remoteHostFundo = new javax.swing.JLabel();
        nomeRHost = new javax.swing.JLabel();
        addMonitoringL = new javax.swing.JLabel();
        RecycleBinL = new javax.swing.JLabel();
        playL = new javax.swing.JLabel();
        homeL = new javax.swing.JLabel();
        fundoHomeL = new javax.swing.JLabel();
        fundoPlayL = new javax.swing.JLabel();
        fundoAddMonitoringL = new javax.swing.JLabel();
        fundoRecycleBinL = new javax.swing.JLabel();
        LoadingLineLeftL = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTA = new javax.swing.JTextArea();
        LoadingLineRightL = new javax.swing.JLabel();
        copyB = new javax.swing.JButton();
        eraserB = new javax.swing.JButton();
        exportB = new javax.swing.JButton();
        editTB = new javax.swing.JToggleButton();
        openDocumentB = new javax.swing.JButton();
        levelSL = new javax.swing.JSlider();
        dataCHB = new javax.swing.JCheckBox();
        dataFinalFTF = new javax.swing.JFormattedTextField();
        deL = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dataInicialFTF = new javax.swing.JFormattedTextField();
        filtrarB = new javax.swing.JButton();
        levelL = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        fundoFiltroL = new javax.swing.JLabel();
        fundoToolbarL = new javax.swing.JLabel();
        fundoConsoleLogL = new javax.swing.JLabel();
        fundoControleL = new javax.swing.JLabel();
        fundoUIL = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NTA - Configuração de monitoramento (Socket)");
        setMaximumSize(new java.awt.Dimension(650, 760));
        setMinimumSize(new java.awt.Dimension(650, 760));
        setPreferredSize(new java.awt.Dimension(650, 760));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        systemL.setText("jLabel1");
        getContentPane().add(systemL, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 90, 80, 80));

        remoteHostL.setText("jLabel1");
        getContentPane().add(remoteHostL, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 30, 190, 170));

        rHostPortTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rHostPortTFFocusGained(evt);
            }
        });
        rHostPortTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rHostPortTFMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                rHostPortTFMouseEntered(evt);
            }
        });
        rHostPortTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rHostPortTFActionPerformed(evt);
            }
        });
        rHostPortTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rHostPortTFKeyReleased(evt);
            }
        });
        getContentPane().add(rHostPortTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 220, 90, -1));

        jLabel1.setText("Porta");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 200, -1, -1));

        rHostTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rHostTFFocusGained(evt);
            }
        });
        rHostTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rHostTFMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                rHostTFMouseEntered(evt);
            }
        });
        rHostTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rHostTFActionPerformed(evt);
            }
        });
        rHostTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rHostTFKeyReleased(evt);
            }
        });
        getContentPane().add(rHostTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 220, 280, -1));

        jLabel2.setText("Servidor Remoto");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 200, -1, -1));

        areaFocoRHost.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                areaFocoRHostMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                areaFocoRHostMouseExited(evt);
            }
        });
        getContentPane().add(areaFocoRHost, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 610, 70));
        getContentPane().add(remoteHostFundo, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 60, 220, 110));

        nomeRHost.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nomeRHost.setText(" ");
        getContentPane().add(nomeRHost, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 40, 220, -1));

        addMonitoringL.setText("jLabel3");
        addMonitoringL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addMonitoringLMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addMonitoringLMouseExited(evt);
            }
        });
        getContentPane().add(addMonitoringL, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 290, 60, 50));

        RecycleBinL.setText("jLabel3");
        RecycleBinL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RecycleBinLMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                RecycleBinLMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                RecycleBinLMouseExited(evt);
            }
        });
        getContentPane().add(RecycleBinL, new org.netbeans.lib.awtextra.AbsoluteConstraints(355, 295, 60, 50));

        playL.setText("jLabel3");
        getContentPane().add(playL, new org.netbeans.lib.awtextra.AbsoluteConstraints(85, 300, 40, 40));

        homeL.setText("jLabel3");
        getContentPane().add(homeL, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 300, 50, 40));

        fundoHomeL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fundoHomeLMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fundoHomeLMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fundoHomeLMouseExited(evt);
            }
        });
        getContentPane().add(fundoHomeL, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 290, 90, 60));

        fundoPlayL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fundoPlayLMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fundoPlayLMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fundoPlayLMouseExited(evt);
            }
        });
        getContentPane().add(fundoPlayL, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 290, 90, 60));

        fundoAddMonitoringL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fundoAddMonitoringLMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fundoAddMonitoringLMouseExited(evt);
            }
        });
        getContentPane().add(fundoAddMonitoringL, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 290, 90, 60));

        fundoRecycleBinL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fundoRecycleBinLMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fundoRecycleBinLMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fundoRecycleBinLMouseExited(evt);
            }
        });
        getContentPane().add(fundoRecycleBinL, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 290, 90, 60));
        getContentPane().add(LoadingLineLeftL, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 120, 300, 40));

        logTA.setEditable(false);
        logTA.setColumns(20);
        logTA.setLineWrap(true);
        logTA.setRows(5);
        logTA.setText("ConsoleLog:");
        logTA.setWrapStyleWord(true);
        jScrollPane1.setViewportView(logTA);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 440, 470, 250));
        getContentPane().add(LoadingLineRightL, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 100, 230, 40));

        copyB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/eraser.png"))); // NOI18N
        copyB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyBActionPerformed(evt);
            }
        });
        getContentPane().add(copyB, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 450, 50, 40));

        eraserB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eraserBActionPerformed(evt);
            }
        });
        getContentPane().add(eraserB, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 500, 50, 40));

        exportB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportBActionPerformed(evt);
            }
        });
        getContentPane().add(exportB, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 540, 50, 40));

        editTB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTBActionPerformed(evt);
            }
        });
        getContentPane().add(editTB, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 640, 50, 40));

        openDocumentB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDocumentBActionPerformed(evt);
            }
        });
        getContentPane().add(openDocumentB, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 590, 50, 40));

        levelSL.setMaximum(5);
        levelSL.setPaintLabels(true);
        levelSL.setPaintTicks(true);
        levelSL.setSnapToTicks(true);
        levelSL.setToolTipText("");
        levelSL.setValue(0);
        levelSL.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                levelSLStateChanged(evt);
            }
        });
        getContentPane().add(levelSL, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 410, 160, 20));

        dataCHB.setText("Considerar datas");
        dataCHB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataCHBActionPerformed(evt);
            }
        });
        getContentPane().add(dataCHB, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 365, -1, -1));

        dataFinalFTF.setText("jFormattedTextField1");
        dataFinalFTF.setEnabled(false);
        getContentPane().add(dataFinalFTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 400, 140, -1));

        deL.setText("De");
        getContentPane().add(deL, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 370, -1, -1));

        jLabel3.setText("Até");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 400, -1, -1));

        dataInicialFTF.setText("jFormattedTextField1");
        dataInicialFTF.setEnabled(false);
        getContentPane().add(dataInicialFTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 370, 140, -1));

        filtrarB.setText("Filtrar");
        filtrarB.setEnabled(false);
        filtrarB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtrarBActionPerformed(evt);
            }
        });
        getContentPane().add(filtrarB, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 370, -1, 50));

        levelL.setText("Level: Debug");
        getContentPane().add(levelL, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 390, 110, -1));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 370, 10, 50));

        fundoFiltroL.setText(".");
        getContentPane().add(fundoFiltroL, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 360, 550, 70));

        fundoToolbarL.setText(".");
        getContentPane().add(fundoToolbarL, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 440, 70, 250));

        fundoConsoleLogL.setText(".");
        getContentPane().add(fundoConsoleLogL, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 590, 440));

        fundoControleL.setText(".");
        getContentPane().add(fundoControleL, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 590, 70));
        getContentPane().add(fundoUIL, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 30, 450, 150));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rHostPortTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rHostPortTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rHostPortTFActionPerformed

    private void rHostTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rHostTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rHostTFActionPerformed

    private void rHostTFMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rHostTFMouseEntered
        // TODO add your handling code here:
        remoteHostFundo.setBorder(new RoundedBorder(Color.BLUE, 3, 20)); // 20 = quão arredondado fica
    }//GEN-LAST:event_rHostTFMouseEntered

    private void rHostPortTFMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rHostPortTFMouseEntered
        // TODO add your handling code here:
        remoteHostFundo.setBorder(new RoundedBorder(Color.BLUE, 3, 20)); // 20 = quão arredondado fica
    }//GEN-LAST:event_rHostPortTFMouseEntered

    private void rHostTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rHostTFFocusGained
        // TODO add your handling code here:
        remoteHostFundo.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
    }//GEN-LAST:event_rHostTFFocusGained

    private void rHostPortTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rHostPortTFFocusGained
        // TODO add your handling code here:
        remoteHostFundo.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
    }//GEN-LAST:event_rHostPortTFFocusGained

    private void rHostTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rHostTFMouseClicked
        // TODO add your handling code here:
        remoteHostFundo.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
    }//GEN-LAST:event_rHostTFMouseClicked

    private void rHostPortTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rHostPortTFMouseClicked
        // TODO add your handling code here:
        remoteHostFundo.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
    }//GEN-LAST:event_rHostPortTFMouseClicked

    private void rHostTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rHostTFKeyReleased
        // TODO add your handling code here:
        nomeRHost.setText((rHostTF.getText() + ":" + rHostPortTF.getText()));
    }//GEN-LAST:event_rHostTFKeyReleased

    private void rHostPortTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rHostPortTFKeyReleased
        // TODO add your handling code here:
        nomeRHost.setText((rHostTF.getText() + ":" + rHostPortTF.getText()));
    }//GEN-LAST:event_rHostPortTFKeyReleased

    private void fundoPlayLMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoPlayLMouseEntered
        // TODO add your handling code here:
        fundoPlayL.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
    }//GEN-LAST:event_fundoPlayLMouseEntered

    private void fundoPlayLMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoPlayLMouseExited
        // TODO add your handling code here:
        fundoPlayL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
    }//GEN-LAST:event_fundoPlayLMouseExited

    private void addMonitoringLMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMonitoringLMouseEntered
        // TODO add your handling code here:
        if (!addMonitoringL.isEnabled()) {
            fundoAddMonitoringL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 3, 20));

        } else {
            fundoAddMonitoringL.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
        }
    }//GEN-LAST:event_addMonitoringLMouseEntered

    private void addMonitoringLMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMonitoringLMouseExited
        // TODO add your handling code here:
        fundoAddMonitoringL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
    }//GEN-LAST:event_addMonitoringLMouseExited

    private void RecycleBinLMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RecycleBinLMouseEntered
        // TODO add your handling code here:
        fundoRecycleBinL.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
    }//GEN-LAST:event_RecycleBinLMouseEntered

    private void RecycleBinLMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RecycleBinLMouseExited
        // TODO add your handling code here:
        fundoRecycleBinL.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
    }//GEN-LAST:event_RecycleBinLMouseExited

    private void fundoAddMonitoringLMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoAddMonitoringLMouseEntered
        // TODO add your handling code here:
        if (!addMonitoringL.isEnabled()) {
            fundoAddMonitoringL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 3, 20));

        } else {
            fundoAddMonitoringL.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
        }
    }//GEN-LAST:event_fundoAddMonitoringLMouseEntered

    private void fundoAddMonitoringLMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoAddMonitoringLMouseExited
        // TODO add your handling code here:
        fundoAddMonitoringL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
    }//GEN-LAST:event_fundoAddMonitoringLMouseExited

    private void fundoRecycleBinLMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoRecycleBinLMouseEntered
        // TODO add your handling code here:
        fundoRecycleBinL.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
    }//GEN-LAST:event_fundoRecycleBinLMouseEntered

    private void fundoRecycleBinLMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoRecycleBinLMouseExited
        // TODO add your handling code here:
        fundoRecycleBinL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
    }//GEN-LAST:event_fundoRecycleBinLMouseExited

    private void fundoHomeLMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoHomeLMouseEntered
        // TODO add your handling code here:
        fundoHomeL.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
    }//GEN-LAST:event_fundoHomeLMouseEntered

    private void fundoHomeLMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoHomeLMouseExited
        // TODO add your handling code here:
        fundoHomeL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
    }//GEN-LAST:event_fundoHomeLMouseExited

    private void fundoHomeLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoHomeLMouseClicked
        // TODO add your handling code here:
        this.dispose(); // Fecha o login
        new MainApplication().setVisible(true); // Abre o sistema
    }//GEN-LAST:event_fundoHomeLMouseClicked

    private void fundoRecycleBinLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoRecycleBinLMouseClicked
        // TODO add your handling code here:
        rHostTF.setText("");
        rHostPortTF.setText("");
        nomeRHost.setText("");
        addMonitoringL.setEnabled(false);
        LoadingLineLeftL.setVisible(false);
        LoadingLineRightL.setVisible(false);
    }//GEN-LAST:event_fundoRecycleBinLMouseClicked

    private void fundoPlayLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoPlayLMouseClicked
        // TODO add your handling code here:
        addMonitoringL.setEnabled(true);
        LoadingLineLeftL.setVisible(true);
        LoadingLineRightL.setVisible(true);
    }//GEN-LAST:event_fundoPlayLMouseClicked

    private void RecycleBinLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RecycleBinLMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_RecycleBinLMouseClicked

    private void copyBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyBActionPerformed
        String texto = logTA.getText();

        if (texto != null && !texto.isEmpty()) {
            StringSelection selecao = new StringSelection(texto);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(selecao, null);

            addLog(LogLevel.INFO, "Log copiado para a área de transferência.");
        } else {
            addLog(LogLevel.WARNING, "Nada para copiar. O log está vazio.");
        }
    }//GEN-LAST:event_copyBActionPerformed

    private void eraserBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eraserBActionPerformed
        // TODO add your handling code here:
        logTA.setText("ConsoleLog:");
        addLog(LogLevel.INFO, "ConsoleLog reiniciado.");
    }//GEN-LAST:event_eraserBActionPerformed

    private void exportBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportBActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Salvar log como...");

        FileNameExtensionFilter filter = new FileNameExtensionFilter("Arquivo de Log (*.log)", "log");
        fileChooser.setFileFilter(filter);

        String dataHora = HostConfig.getDataHoraAtual().replace(":", "-").replace(" ", "_");
        String nomePadrao = "NTALog_" + dataHora + ".log";

        fileChooser.setSelectedFile(new File(nomePadrao));

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            if (!fileToSave.getName().toLowerCase().endsWith(".log")) {
                fileToSave = new File(fileToSave.getAbsolutePath() + ".log");
            }

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileToSave))) {
                writer.write(logTA.getText());
                addLog(LogLevel.INFO, "Log exportado para: " + fileToSave.getAbsolutePath());
                JOptionPane.showMessageDialog(this, "Log exportado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                addLog(LogLevel.ERROR, "Erro ao exportar o log: " + e.getMessage());
                JOptionPane.showMessageDialog(this, "Erro ao salvar o log.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            addLog(LogLevel.WARNING, "Exportação de log cancelada pelo usuário.");
        }

    }//GEN-LAST:event_exportBActionPerformed

    private void editTBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTBActionPerformed
        // TODO add your handling code here:
        if (editTB.isSelected()) {
            logTA.setEditable(true);
            addLog(LogLevel.INFO, "Ativado o modo editor do ConsoleLog.");
        } else {
            logTA.setEditable(false);
            addLog(LogLevel.INFO, "Desativado o modo editor do ConsoleLog.");
        }

    }//GEN-LAST:event_editTBActionPerformed

    private void openDocumentBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDocumentBActionPerformed
        // TODO add your handling code here:
        String conteudoLog = logTA.getText();

        try {
            // Cria arquivo temporário
            File tempFile = File.createTempFile("log_temp_", ".txt");
            tempFile.deleteOnExit(); // apaga ao fechar app

            // Escreve o conteúdo no arquivo
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {
                writer.write(conteudoLog);
            }

            String os = HostConfig.obterSistemaOperacional();

            // Comando para abrir o arquivo dependendo do SO
            if (os.equals("Windows")) {
                Runtime.getRuntime().exec(new String[]{"notepad.exe", tempFile.getAbsolutePath()});
                addLog(LogLevel.DEBUG, "Encaminhado o log para o notepad.");
            } else if (os.equals("Mac")) {
                Runtime.getRuntime().exec(new String[]{"open", tempFile.getAbsolutePath()});
                addLog(LogLevel.DEBUG, "Encaminhado o log para o editor de textos.");
            } else if (os.equals("Linux")) {
                Runtime.getRuntime().exec(new String[]{"xdg-open", tempFile.getAbsolutePath()});
                addLog(LogLevel.DEBUG, "Encaminhado o log para o editor de textos..");
            } else {
                JOptionPane.showMessageDialog(this, "Sistema operacional não suportado para abrir o editor de texto.", "Erro", JOptionPane.ERROR_MESSAGE);
            }

        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao abrir o editor de texto: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_openDocumentBActionPerformed

    private void dataCHBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataCHBActionPerformed
        // TODO add your handling code here:

        if (dataCHB.isSelected()) {
            dataInicialFTF.setEnabled(true);
            dataFinalFTF.setEnabled(true);
            filtrarB.setEnabled(true);
        } else {
            dataInicialFTF.setEnabled(false);
            dataFinalFTF.setEnabled(false);
            filtrarB.setEnabled(false);
        }
    }//GEN-LAST:event_dataCHBActionPerformed

    private void levelSLStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_levelSLStateChanged
        // TODO add your handling code here:
        System.out.println(levelSL.getValue());
        switch (levelSL.getValue()) {
            case 1:
                levelL.setText("Level: Fine");
                break;
            case 2:
                levelL.setText("Level: Info");
                break;
            case 3:
                levelL.setText("Level: Warning");
                break;
            case 4:
                levelL.setText("Level: Error");
                break;
            case 5:
                levelL.setText("Level: Severe");
                break;
            // ...
            default:
                levelL.setText("Level: Debug");
        }
        filterDisplayResults();

    }//GEN-LAST:event_levelSLStateChanged

    private void areaFocoRHostMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_areaFocoRHostMouseExited
        // TODO add your handling code here:
        remoteHostFundo.setBorder(new RoundedBorder(Color.GRAY, 1, 20));
    }//GEN-LAST:event_areaFocoRHostMouseExited

    private void areaFocoRHostMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_areaFocoRHostMouseEntered
        // TODO add your handling code here:
        // remoteHostFundo.setBorder(BorderFactory.createLineBorder(Color.BLUE, 3));
        remoteHostFundo.setBorder(new RoundedBorder(Color.BLUE, 3, 20)); // 20 = quão arredondado fica
    }//GEN-LAST:event_areaFocoRHostMouseEntered

    private void filtrarBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtrarBActionPerformed
        // TODO add your handling code here:
        filterDisplayResults();
    }//GEN-LAST:event_filtrarBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(SocketUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        // Inicia a UI na thread de eventos do Swing
        java.awt.EventQueue.invokeLater(() -> {
            new SocketUI().setVisible(true);
        });
    }

    private void initImg() {
        //ScaledImages
        LoadingLineLeftL.setVisible(false);
        LoadingLineRightL.setVisible(false);
        addMonitoringL.setEnabled(false);
        remoteHostFundo.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
        fundoPlayL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
        fundoAddMonitoringL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
        fundoRecycleBinL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
        fundoHomeL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
        fundoFiltroL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
        fundoToolbarL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
        fundoConsoleLogL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 2, 20));
        fundoControleL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 2, 20));
        fundoUIL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 2, 20));

        Image systemLogo;
        switch (HostConfig.obterSistemaOperacional()) {
            case "Windows":
                systemLogo = this.getScaledImage("imgs/hostWindows.png", systemL, true);
                break;

            case "Linux":
                systemLogo = this.getScaledImage("imgs/hostLinux.png", systemL, true);
                break;

            case "Mac":
                systemLogo = this.getScaledImage("imgs/hostMac.png", systemL, true);
                break;

            default:
                systemLogo = this.getScaledImage("imgs/host.png", systemL, true);
                break;
        }

        Image serverLogo = this.getScaledImage("imgs/server_static.png", remoteHostL, true);
        Image playLogo = this.getScaledImage("imgs/play_Icon.png", playL, true);
        Image addMonitoringLogo = this.getScaledImage("imgs/addMonitoring.png", addMonitoringL, true);
        Image homeLogo = this.getScaledImage("imgs/home_Icon.png", homeL, true);
        Image recycleBinIcon = this.getScaledImage("imgs/recicleByn_Icon.png", RecycleBinL, true);

        Image LoadingLineRightIcon = this.getScaledImage("imgs/line.gif", LoadingLineLeftL, false);
        Image LoadingLineLeftIcon = this.getScaledImage("imgs/lineR.gif", LoadingLineRightL, false);

        Image exportFileIcon = this.getScaledImage("imgs/export_Icon.png", exportB, true);
        Image eraserIcon = this.getScaledImage("imgs/eraser.png", eraserB, true);
        Image copyIcon = this.getScaledImage("imgs/copy.png", copyB, true);
        Image editorIcon = this.getScaledImage("imgs/edit_Icon.png", editTB, true);
        Image openDocumentIcon = this.getScaledImage("imgs/notepad_Icon.png", openDocumentB, true);

        setScaledImage(remoteHostL, serverLogo);
        setScaledImage(systemL, systemLogo);

        setScaledImage(playL, playLogo);
        setScaledImage(addMonitoringL, addMonitoringLogo);
        setScaledImage(homeL, homeLogo);
        setScaledImage(RecycleBinL, recycleBinIcon);

        setScaledImage(LoadingLineLeftL, LoadingLineRightIcon);
        setScaledImage(LoadingLineRightL, LoadingLineLeftIcon);

        setScaledImage(exportB, exportFileIcon);
        setScaledImage(eraserB, eraserIcon);
        setScaledImage(copyB, copyIcon);
        setScaledImage(editTB, editorIcon);
        setScaledImage(openDocumentB, openDocumentIcon);
    }

    private void addLog(LogLevel level, String input) {
        logTA.setText(logTA.getText() + "\n" + getLogFormat(level, input));
        addToArray(input, level);
    }

    private void addToArray(String input, LogLevel level) {

        LogOccurrence log = new LogOccurrence(input, level);
        this.LogArray.add(log);
    }

    private void filterDisplayResults() {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss"); // <-- Aqui está o ajuste
        logTA.setText("ConsoleLog:");

        if (dataCHB.isSelected()) {
            try {
                Date dataInicial = sdf.parse(dataInicialFTF.getText());
                Date dataFinal = sdf.parse(dataFinalFTF.getText());

                for (LogOccurrence log : LogArray) {
                    if (permitirLogGeracao(log.getSeverity())) {
                        Date dataLog = log.getOccurrence();
                        if (dataLog != null && !dataLog.before(dataInicial) && !dataLog.after(dataFinal)) {
                            logTA.setText(logTA.getText() + "\n" + HostConfig.getLogFormatFromLogOccurrence(log));
                        }
                    }
                }
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(this, "Por favor, preencha corretamente as datas nos campos!", "Data inválida", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            for (LogOccurrence log : LogArray) {
                if (permitirLogGeracao(log.getSeverity())) {
                    logTA.setText(logTA.getText() + "\n" + HostConfig.getLogFormatFromLogOccurrence(log));
                }
            }
        }
    }

    public boolean permitirLogGeracao(LogLevel nivelGerado) {
        return nivelGerado.getPrioridade() >= (levelSL.getValue() + 1);
    }

    private Image getScaledImage(String directory, javax.swing.JLabel label, boolean scaled) {
        ImageIcon icon = new ImageIcon(getClass().getClassLoader().getResource(directory));
        Image image = icon.getImage();

        if (scaled) {
            Image ScaledImage = image.getScaledInstance(label.getWidth(), label.getHeight(), Image.SCALE_SMOOTH);
            return ScaledImage;
        } else {
            return image;
        }
    }

    private Image getScaledImage(String directory, javax.swing.JButton label, boolean scaled) {
        ImageIcon icon = new ImageIcon(getClass().getClassLoader().getResource(directory));
        Image image = icon.getImage();

        if (scaled) {
            Image ScaledImage = image.getScaledInstance(label.getWidth() - 10, label.getHeight() - 10, Image.SCALE_SMOOTH);
            return ScaledImage;
        } else {
            return image;
        }
    }

    private Image getScaledImage(String directory, javax.swing.JToggleButton label, boolean scaled) {
        ImageIcon icon = new ImageIcon(getClass().getClassLoader().getResource(directory));
        Image image = icon.getImage();

        if (scaled) {
            Image ScaledImage = image.getScaledInstance(label.getWidth() - 10, label.getHeight() - 10, Image.SCALE_SMOOTH);
            return ScaledImage;
        } else {
            return image;
        }
    }

    private void setScaledImage(javax.swing.JLabel label, Image image) {
        label.setIcon(new javax.swing.ImageIcon(image));
    }

    private void setScaledImage(javax.swing.JToggleButton label, Image image) {
        label.setIcon(new javax.swing.ImageIcon(image));
    }

    private void setScaledImage(javax.swing.JButton label, Image image) {
        label.setIcon(new javax.swing.ImageIcon(image));
    }

    private void inicializaFTF() {
        // Máscara: dd/MM/yyyy HH:mm:ss
        MaskFormatter dateMask = null;

        try {
            dateMask = new MaskFormatter("##/##/#### ##:##:##");
        } catch (ParseException ex) {
            Logger.getLogger(LoginForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        dateMask.setPlaceholderCharacter('_');

        dataInicialFTF.setColumns(20);
        dataInicialFTF.setFormatterFactory(new DefaultFormatterFactory(dateMask));
        dataFinalFTF.setColumns(20);
        dataFinalFTF.setFormatterFactory(new DefaultFormatterFactory(dateMask));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LoadingLineLeftL;
    private javax.swing.JLabel LoadingLineRightL;
    private javax.swing.JLabel RecycleBinL;
    private javax.swing.JLabel addMonitoringL;
    private javax.swing.JLabel areaFocoRHost;
    private javax.swing.JButton copyB;
    private javax.swing.JCheckBox dataCHB;
    private javax.swing.JFormattedTextField dataFinalFTF;
    private javax.swing.JFormattedTextField dataInicialFTF;
    private javax.swing.JLabel deL;
    private javax.swing.JToggleButton editTB;
    private javax.swing.JButton eraserB;
    private javax.swing.JButton exportB;
    private javax.swing.JButton filtrarB;
    private javax.swing.JLabel fundoAddMonitoringL;
    private javax.swing.JLabel fundoConsoleLogL;
    private javax.swing.JLabel fundoControleL;
    private javax.swing.JLabel fundoFiltroL;
    private javax.swing.JLabel fundoHomeL;
    private javax.swing.JLabel fundoPlayL;
    private javax.swing.JLabel fundoRecycleBinL;
    private javax.swing.JLabel fundoToolbarL;
    private javax.swing.JLabel fundoUIL;
    private javax.swing.JLabel homeL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel levelL;
    private javax.swing.JSlider levelSL;
    private javax.swing.JTextArea logTA;
    private javax.swing.JLabel nomeRHost;
    private javax.swing.JButton openDocumentB;
    private javax.swing.JLabel playL;
    private javax.swing.JTextField rHostPortTF;
    private javax.swing.JTextField rHostTF;
    private javax.swing.JLabel remoteHostFundo;
    private javax.swing.JLabel remoteHostL;
    private javax.swing.JLabel systemL;
    // End of variables declaration//GEN-END:variables
}
