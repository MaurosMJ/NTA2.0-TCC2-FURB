/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Entities.LogOccurrenceModule;
import Enum.LogLevel;
import Persistence.JsonPersistence;
import static Persistence.JsonPersistence.salvarJsonEmAppData;
import Persistence.Modules.TelnetPersistence.TelnetConfig;
import Persistence.Worker1.Worker1Persistence;
import Service.Telnet_Client;
import Utils.HostConfig;
import static Utils.HostConfig.getLogFormat;
import Utils.RoundedBorder;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FontMetrics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author Mauros
 */
public class TelnetUI extends javax.swing.JFrame {

    private ArrayList<LogOccurrenceModule> LogArray = new ArrayList<>();
    private final Map<Integer, String> portasPadrao = new HashMap<>();
    private boolean barraPesquisaPrimeiroAcesso = true;
    private Telnet_Client telnet;

    /**
     * Creates new form SocketUI
     */
    public TelnetUI() {
        long inicio = System.nanoTime(); // Marca o tempo no começo do construtor

        initComponents();
        addLog(LogLevel.INFO, "Inicializando componentes");
        setLayout(null);
        this.initImg();
        inicializaFTF();
        inicializarPortasPadrao();
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                // Ao fechar a janela principal, abre novamente o LoginForm
                new LoginForm().setVisible(true);
            }
        });

        setLocationRelativeTo(null);
        defaultInfoButtonTxt();
        carregarInformacoes();
        // Usa SwingUtilities para garantir que a UI esteja renderizada
        SwingUtilities.invokeLater(() -> {
            long fim = System.nanoTime();
            long tempoMs = (fim - inicio) / 1_000_000;
            addLog(LogLevel.DEBUG, "Montagem da tela finalizada em " + tempoMs + " ms");
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        systemL = new javax.swing.JLabel();
        remoteHostL = new javax.swing.JLabel();
        promptTF = new javax.swing.JTextField();
        rHostPortTF = new javax.swing.JTextField();
        rHostTF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        remoteHostFundo = new javax.swing.JLabel();
        nomeRHost = new javax.swing.JLabel();
        addMonitoringL = new javax.swing.JLabel();
        RecycleBinL = new javax.swing.JLabel();
        playL = new javax.swing.JLabel();
        homeL = new javax.swing.JLabel();
        fundoHomeL = new javax.swing.JLabel();
        fundoPlayL = new javax.swing.JLabel();
        fundoAddMonitoringL = new javax.swing.JLabel();
        fundoRecycleBinL = new javax.swing.JLabel();
        LoadingLineLeftL = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTA = new javax.swing.JTextArea();
        LoadingLineRightL = new javax.swing.JLabel();
        copyB = new javax.swing.JButton();
        eraserB = new javax.swing.JButton();
        exportB = new javax.swing.JButton();
        editTB = new javax.swing.JToggleButton();
        openDocumentB = new javax.swing.JButton();
        levelSL = new javax.swing.JSlider();
        dataCHB = new javax.swing.JCheckBox();
        dataFinalFTF = new javax.swing.JFormattedTextField();
        deL = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dataInicialFTF = new javax.swing.JFormattedTextField();
        campoPesquisaTF = new javax.swing.JTextField();
        searchL = new javax.swing.JLabel();
        filtrarB = new javax.swing.JButton();
        levelL = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        workspaceCBX = new javax.swing.JComboBox();
        fundoFiltroL = new javax.swing.JLabel();
        fundoToolbarL = new javax.swing.JLabel();
        fundoConsoleLogL = new javax.swing.JLabel();
        fundoUIL = new javax.swing.JLabel();
        InfoL = new javax.swing.JLabel();
        userInfoL = new javax.swing.JLabel();
        ppadraoL = new javax.swing.JLabel();
        fundoPromptL = new javax.swing.JLabel();
        areaFocoRHost = new javax.swing.JLabel();
        fundoControleL = new javax.swing.JLabel();
        fundoPesquisaL = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NTA - Configuração de monitoramento (Telnet)");
        setMinimumSize(new java.awt.Dimension(650, 865));
        setPreferredSize(new java.awt.Dimension(650, 865));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel4.setText("Workspace");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 75, -1, -1));

        systemL.setText("jLabel1");
        getContentPane().add(systemL, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, 80, 80));

        remoteHostL.setText("jLabel1");
        getContentPane().add(remoteHostL, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 50, 190, 170));

        promptTF.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        promptTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                promptTFFocusGained(evt);
            }
        });
        promptTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                promptTFMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                promptTFMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                promptTFMouseExited(evt);
            }
        });
        promptTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                promptTFActionPerformed(evt);
            }
        });
        promptTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                promptTFKeyReleased(evt);
            }
        });
        getContentPane().add(promptTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 320, 473, -1));

        rHostPortTF.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        rHostPortTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rHostPortTFFocusGained(evt);
            }
        });
        rHostPortTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rHostPortTFMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                rHostPortTFMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                rHostPortTFMouseExited(evt);
            }
        });
        rHostPortTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rHostPortTFActionPerformed(evt);
            }
        });
        rHostPortTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rHostPortTFKeyReleased(evt);
            }
        });
        getContentPane().add(rHostPortTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 240, 150, -1));

        rHostTF.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        rHostTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rHostTFFocusGained(evt);
            }
        });
        rHostTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rHostTFMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                rHostTFMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                rHostTFMouseExited(evt);
            }
        });
        rHostTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rHostTFActionPerformed(evt);
            }
        });
        rHostTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rHostTFKeyReleased(evt);
            }
        });
        getContentPane().add(rHostTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 240, 290, -1));

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        jLabel2.setText("Servidor Remoto");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 220, -1, -1));
        getContentPane().add(remoteHostFundo, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 80, 220, 110));

        nomeRHost.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nomeRHost.setText(" ");
        getContentPane().add(nomeRHost, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 60, 220, -1));

        addMonitoringL.setText("jLabel3");
        addMonitoringL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addMonitoringLMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addMonitoringLMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addMonitoringLMouseExited(evt);
            }
        });
        getContentPane().add(addMonitoringL, new org.netbeans.lib.awtextra.AbsoluteConstraints(214, 394, 60, 50));

        RecycleBinL.setText("jLabel3");
        RecycleBinL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RecycleBinLMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                RecycleBinLMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                RecycleBinLMouseExited(evt);
            }
        });
        getContentPane().add(RecycleBinL, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 390, 60, 50));

        playL.setText("jLabel3");
        playL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playLMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                playLMouseEntered(evt);
            }
        });
        getContentPane().add(playL, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 400, 40, 40));

        homeL.setText("jLabel3");
        homeL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                homeLMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                homeLMouseEntered(evt);
            }
        });
        getContentPane().add(homeL, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 400, 50, 40));

        fundoHomeL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fundoHomeLMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fundoHomeLMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fundoHomeLMouseExited(evt);
            }
        });
        getContentPane().add(fundoHomeL, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 390, 90, 60));

        fundoPlayL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fundoPlayLMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fundoPlayLMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fundoPlayLMouseExited(evt);
            }
        });
        getContentPane().add(fundoPlayL, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 390, 90, 60));

        fundoAddMonitoringL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fundoAddMonitoringLMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fundoAddMonitoringLMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fundoAddMonitoringLMouseExited(evt);
            }
        });
        getContentPane().add(fundoAddMonitoringL, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 390, 90, 60));

        fundoRecycleBinL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fundoRecycleBinLMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fundoRecycleBinLMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fundoRecycleBinLMouseExited(evt);
            }
        });
        getContentPane().add(fundoRecycleBinL, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 390, 90, 60));
        getContentPane().add(LoadingLineLeftL, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 140, 300, 40));

        logTA.setEditable(false);
        logTA.setColumns(20);
        logTA.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        logTA.setLineWrap(true);
        logTA.setRows(5);
        logTA.setText("ConsoleLog:");
        logTA.setWrapStyleWord(true);
        jScrollPane1.setViewportView(logTA);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 600, 470, 190));
        getContentPane().add(LoadingLineRightL, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 120, 230, 40));

        copyB.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        copyB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/eraser.png"))); // NOI18N
        copyB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                copyBMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                copyBMouseExited(evt);
            }
        });
        copyB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyBActionPerformed(evt);
            }
        });
        getContentPane().add(copyB, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 550, 50, 40));

        eraserB.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        eraserB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                eraserBMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                eraserBMouseExited(evt);
            }
        });
        eraserB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eraserBActionPerformed(evt);
            }
        });
        getContentPane().add(eraserB, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 600, 50, 40));

        exportB.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        exportB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                exportBMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                exportBMouseExited(evt);
            }
        });
        exportB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportBActionPerformed(evt);
            }
        });
        getContentPane().add(exportB, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 640, 50, 40));

        editTB.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        editTB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                editTBMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                editTBMouseExited(evt);
            }
        });
        editTB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTBActionPerformed(evt);
            }
        });
        getContentPane().add(editTB, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 740, 50, 40));

        openDocumentB.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        openDocumentB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                openDocumentBMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                openDocumentBMouseExited(evt);
            }
        });
        openDocumentB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDocumentBActionPerformed(evt);
            }
        });
        getContentPane().add(openDocumentB, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 690, 50, 40));

        levelSL.setMaximum(5);
        levelSL.setPaintLabels(true);
        levelSL.setPaintTicks(true);
        levelSL.setSnapToTicks(true);
        levelSL.setToolTipText("");
        levelSL.setValue(0);
        levelSL.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                levelSLStateChanged(evt);
            }
        });
        levelSL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                levelSLMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                levelSLMouseExited(evt);
            }
        });
        getContentPane().add(levelSL, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 510, 160, 20));

        dataCHB.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        dataCHB.setText("Considerar datas");
        dataCHB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dataCHBStateChanged(evt);
            }
        });
        dataCHB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                dataCHBMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                dataCHBMouseExited(evt);
            }
        });
        dataCHB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataCHBActionPerformed(evt);
            }
        });
        getContentPane().add(dataCHB, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 460, -1, -1));

        dataFinalFTF.setEnabled(false);
        dataFinalFTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                dataFinalFTFMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                dataFinalFTFMouseExited(evt);
            }
        });
        dataFinalFTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dataFinalFTFKeyReleased(evt);
            }
        });
        getContentPane().add(dataFinalFTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 500, 140, -1));

        deL.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        deL.setText("De");
        getContentPane().add(deL, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 470, -1, -1));

        jLabel3.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        jLabel3.setText("Até");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 500, -1, -1));

        dataInicialFTF.setEnabled(false);
        dataInicialFTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                dataInicialFTFMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                dataInicialFTFMouseExited(evt);
            }
        });
        dataInicialFTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dataInicialFTFKeyReleased(evt);
            }
        });
        getContentPane().add(dataInicialFTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 470, 140, -1));

        campoPesquisaTF.setFont(new java.awt.Font("SansSerif", 2, 16)); // NOI18N
        campoPesquisaTF.setText("   Pesquisar");
        campoPesquisaTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                campoPesquisaTFMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                campoPesquisaTFMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                campoPesquisaTFMouseExited(evt);
            }
        });
        campoPesquisaTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoPesquisaTFActionPerformed(evt);
            }
        });
        campoPesquisaTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoPesquisaTFKeyReleased(evt);
            }
        });
        getContentPane().add(campoPesquisaTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 550, 410, 30));
        getContentPane().add(searchL, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 550, 30, 30));

        filtrarB.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        filtrarB.setText("Filtrar");
        filtrarB.setEnabled(false);
        filtrarB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                filtrarBMouseEntered(evt);
            }
        });
        filtrarB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtrarBActionPerformed(evt);
            }
        });
        getContentPane().add(filtrarB, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 470, -1, 50));

        levelL.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        levelL.setText("Level: Debug");
        getContentPane().add(levelL, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 490, 110, -1));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 470, 10, 50));

        workspaceCBX.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        workspaceCBX.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5" }));
        workspaceCBX.setMaximumSize(new java.awt.Dimension(36, 35));
        workspaceCBX.setMinimumSize(new java.awt.Dimension(36, 35));
        workspaceCBX.setPreferredSize(new java.awt.Dimension(36, 35));
        workspaceCBX.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                workspaceCBXItemStateChanged(evt);
            }
        });
        workspaceCBX.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                workspaceCBXMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                workspaceCBXMouseExited(evt);
            }
        });
        getContentPane().add(workspaceCBX, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 70, 50, 30));

        fundoFiltroL.setText(".");
        getContentPane().add(fundoFiltroL, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 460, 550, 70));

        fundoToolbarL.setText(".");
        getContentPane().add(fundoToolbarL, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 540, 70, 250));

        fundoConsoleLogL.setText(".");
        getContentPane().add(fundoConsoleLogL, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, 590, 440));
        getContentPane().add(fundoUIL, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 50, 450, 150));
        getContentPane().add(InfoL, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 15, 30, 30));

        userInfoL.setBackground(new java.awt.Color(255, 255, 255));
        userInfoL.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        userInfoL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userInfoL.setText("Selecione uma das opções abaixo.");
        userInfoL.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        userInfoL.setOpaque(true);
        getContentPane().add(userInfoL, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 15, 360, -1));

        ppadraoL.setText("Porta");
        getContentPane().add(ppadraoL, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 220, -1, -1));

        fundoPromptL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fundoPromptLMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fundoPromptLMouseExited(evt);
            }
        });
        getContentPane().add(fundoPromptL, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 590, 70));

        areaFocoRHost.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                areaFocoRHostMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                areaFocoRHostMouseExited(evt);
            }
        });
        getContentPane().add(areaFocoRHost, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 610, 70));

        fundoControleL.setText(".");
        getContentPane().add(fundoControleL, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 590, 70));
        getContentPane().add(fundoPesquisaL, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 540, 470, 50));

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        jLabel1.setText("Instrução");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 300, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rHostPortTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rHostPortTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rHostPortTFActionPerformed

    private void rHostTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rHostTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rHostTFActionPerformed

    private void rHostTFMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rHostTFMouseEntered
        // TODO add your handling code here:
        remoteHostFundo.setBorder(new RoundedBorder(Color.BLUE, 3, 20)); // 20 = quão arredondado fica
        setTextInfoButton("Informe o endereço de IP da máquina destino.");
    }//GEN-LAST:event_rHostTFMouseEntered

    private void rHostPortTFMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rHostPortTFMouseEntered
        // TODO add your handling code here:
        remoteHostFundo.setBorder(new RoundedBorder(Color.BLUE, 3, 20)); // 20 = quão arredondado fica
        setTextInfoButton("Informe a porta da máquina destino.");
    }//GEN-LAST:event_rHostPortTFMouseEntered

    private void rHostTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rHostTFFocusGained
        // TODO add your handling code here:
        remoteHostFundo.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
    }//GEN-LAST:event_rHostTFFocusGained

    private void rHostPortTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rHostPortTFFocusGained
        // TODO add your handling code here:
        remoteHostFundo.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
    }//GEN-LAST:event_rHostPortTFFocusGained

    private void rHostTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rHostTFMouseClicked
        // TODO add your handling code here:
        remoteHostFundo.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
    }//GEN-LAST:event_rHostTFMouseClicked

    private void rHostPortTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rHostPortTFMouseClicked
        // TODO add your handling code here:
        remoteHostFundo.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
    }//GEN-LAST:event_rHostPortTFMouseClicked

    private void rHostTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rHostTFKeyReleased
        // TODO add your handling code here:
        nomeRHost.setText((rHostTF.getText() + ":" + rHostPortTF.getText()));
        persistirInformacoes();
    }//GEN-LAST:event_rHostTFKeyReleased

    private void rHostPortTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rHostPortTFKeyReleased
        // TODO add your handling code here:
        nomeRHost.setText((rHostTF.getText() + ":" + rHostPortTF.getText()));
        persistirInformacoes();
    }//GEN-LAST:event_rHostPortTFKeyReleased

    private void fundoPlayLMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoPlayLMouseEntered
        // TODO add your handling code here:
        fundoPlayL.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
        setTextInfoButton("Utilize essa opção para estabelecer comunicação com o servidor destino.");
    }//GEN-LAST:event_fundoPlayLMouseEntered

    private void fundoPlayLMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoPlayLMouseExited
        // TODO add your handling code here:
        fundoPlayL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
        defaultInfoButtonTxt();
    }//GEN-LAST:event_fundoPlayLMouseExited

    private void addMonitoringLMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMonitoringLMouseEntered
        // TODO add your handling code here:
        setTextInfoButton("Utilize essa opção para adicionar essa funcionalidade ao monitoramento.");
        if (!addMonitoringL.isEnabled()) {
            fundoAddMonitoringL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 3, 20));

        } else {
            fundoAddMonitoringL.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
        }
    }//GEN-LAST:event_addMonitoringLMouseEntered

    private void addMonitoringLMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMonitoringLMouseExited
        // TODO add your handling code here:
        fundoAddMonitoringL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
        defaultInfoButtonTxt();
    }//GEN-LAST:event_addMonitoringLMouseExited

    private void RecycleBinLMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RecycleBinLMouseEntered
        // TODO add your handling code here:
        fundoRecycleBinL.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
        setTextInfoButton("Utilize essa opção para zerar informações em tela.");
    }//GEN-LAST:event_RecycleBinLMouseEntered

    private void RecycleBinLMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RecycleBinLMouseExited
        // TODO add your handling code here:
        fundoRecycleBinL.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
        defaultInfoButtonTxt();
    }//GEN-LAST:event_RecycleBinLMouseExited

    private void fundoAddMonitoringLMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoAddMonitoringLMouseEntered
        fundoAddMonitoringLMouseAction();
    }//GEN-LAST:event_fundoAddMonitoringLMouseEntered

    private void fundoAddMonitoringLMouseAction() {
        setTextInfoButton("Utilize essa opção para adicionar essa funcionalidade ao monitoramento.");
        if (!addMonitoringL.isEnabled()) {
            fundoAddMonitoringL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 3, 20));

        } else {
            fundoAddMonitoringL.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
        }
    }

    private void fundoAddMonitoringLMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoAddMonitoringLMouseExited
        // TODO add your handling code here:
        fundoAddMonitoringL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
        defaultInfoButtonTxt();
    }//GEN-LAST:event_fundoAddMonitoringLMouseExited

    private void fundoRecycleBinLMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoRecycleBinLMouseEntered
        // TODO add your handling code here:
        setTextInfoButton("Utilize essa opção para zerar informações em tela.");
        fundoRecycleBinL.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
    }//GEN-LAST:event_fundoRecycleBinLMouseEntered

    private void fundoRecycleBinLMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoRecycleBinLMouseExited
        // TODO add your handling code here:
        fundoRecycleBinL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
        defaultInfoButtonTxt();
    }//GEN-LAST:event_fundoRecycleBinLMouseExited

    private void fundoHomeLMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoHomeLMouseEntered
        // TODO add your handling code here:
        setTextInfoButton("Utilize essa opção para retornar ao menu do sistema.");
        fundoHomeL.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
    }//GEN-LAST:event_fundoHomeLMouseEntered

    private void fundoHomeLMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoHomeLMouseExited
        // TODO add your handling code here:
        fundoHomeL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
        defaultInfoButtonTxt();
    }//GEN-LAST:event_fundoHomeLMouseExited

    private void fundoHomeLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoHomeLMouseClicked
        fundoHomeAction();
    }//GEN-LAST:event_fundoHomeLMouseClicked

    private void fundoAddMonitoringAction() {
        addMonitoring();
        persistirInformacoes();
    }

    private void fundoHomeAction() {
        persistirInformacoes();
        this.dispose();
        new MainMenuForm().setVisible(true);
    }

    private void fundoRecycleBinLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoRecycleBinLMouseClicked
        fundoRecycleBinAction();
    }//GEN-LAST:event_fundoRecycleBinLMouseClicked

    private void fundoRecycleBinAction() {
        rHostTF.setText("");
        rHostPortTF.setText("");
        promptTF.setText("");
        nomeRHost.setText("");
        addMonitoringL.setEnabled(false);
        LoadingLineLeftL.setVisible(false);
        LoadingLineRightL.setVisible(false);
        persistirInformacoes();
    }

    private void fundoPlayLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoPlayLMouseClicked
        fundoPlayAction();
    }//GEN-LAST:event_fundoPlayLMouseClicked

    private void fundoPlayAction() {
        addMonitoringL.setEnabled(true);
        LoadingLineLeftL.setVisible(true);
        LoadingLineRightL.setVisible(true);
        telnet = new Telnet_Client(rHostTF.getText(), rHostPortTF.getText(), promptTF.getText());
        addToArray(telnet.PerformServerConnection());
        filterDisplayResults();
        persistirInformacoes();
    }

    private void RecycleBinLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RecycleBinLMouseClicked
        fundoRecycleBinAction();
    }//GEN-LAST:event_RecycleBinLMouseClicked

    private void copyBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyBActionPerformed
        String texto = logTA.getText();

        if (texto != null && !texto.isEmpty()) {
            StringSelection selecao = new StringSelection(texto);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(selecao, null);

            addLog(LogLevel.INFO, "Log copiado para a área de transferência.");
        } else {
            addLog(LogLevel.WARNING, "Nada para copiar. O log está vazio.");
        }
    }//GEN-LAST:event_copyBActionPerformed

    private void eraserBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eraserBActionPerformed
        // TODO add your handling code here:
        logTA.setText("ConsoleLog:");
        addLog(LogLevel.INFO, "ConsoleLog reiniciado.");
    }//GEN-LAST:event_eraserBActionPerformed

    private void exportBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportBActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Salvar log como...");

        FileNameExtensionFilter filter = new FileNameExtensionFilter("Arquivo de Log (*.log)", "log");
        fileChooser.setFileFilter(filter);

        String dataHora = HostConfig.getDataHoraAtual().replace(":", "-").replace(" ", "_");
        String nomePadrao = "NTALog_" + dataHora + ".log";

        fileChooser.setSelectedFile(new File(nomePadrao));

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            if (!fileToSave.getName().toLowerCase().endsWith(".log")) {
                fileToSave = new File(fileToSave.getAbsolutePath() + ".log");
            }

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileToSave))) {
                writer.write(logTA.getText());
                addLog(LogLevel.INFO, "Log exportado para: " + fileToSave.getAbsolutePath());
                JOptionPane.showMessageDialog(this, "Log exportado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                addLog(LogLevel.ERROR, "Erro ao exportar o log: " + e.getMessage());
                JOptionPane.showMessageDialog(this, "Erro ao salvar o log.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            addLog(LogLevel.WARNING, "Exportação de log cancelada pelo usuário.");
        }

    }//GEN-LAST:event_exportBActionPerformed

    private void editTBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTBActionPerformed
        // TODO add your handling code here:
        if (editTB.isSelected()) {
            logTA.setEditable(true);
            addLog(LogLevel.INFO, "Ativado o modo editor do ConsoleLog.");
        } else {
            logTA.setEditable(false);
            addLog(LogLevel.INFO, "Desativado o modo editor do ConsoleLog.");
        }
        persistirInformacoes();
    }//GEN-LAST:event_editTBActionPerformed

    private void openDocumentBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDocumentBActionPerformed
        // TODO add your handling code here:
        String conteudoLog = logTA.getText();

        try {
            // Cria arquivo temporário
            File tempFile = File.createTempFile("log_temp_", ".txt");
            tempFile.deleteOnExit(); // apaga ao fechar app

            // Escreve o conteúdo no arquivo
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {
                writer.write(conteudoLog);
            }

            String os = HostConfig.obterSistemaOperacional();

            // Comando para abrir o arquivo dependendo do SO
            if (os.equals("Windows")) {
                Runtime.getRuntime().exec(new String[]{"notepad.exe", tempFile.getAbsolutePath()});
                addLog(LogLevel.DEBUG, "Encaminhado o log para o notepad.");
            } else if (os.equals("Mac")) {
                Runtime.getRuntime().exec(new String[]{"open", tempFile.getAbsolutePath()});
                addLog(LogLevel.DEBUG, "Encaminhado o log para o editor de textos.");
            } else if (os.equals("Linux")) {
                Runtime.getRuntime().exec(new String[]{"xdg-open", tempFile.getAbsolutePath()});
                addLog(LogLevel.DEBUG, "Encaminhado o log para o editor de textos..");
            } else {
                JOptionPane.showMessageDialog(this, "Sistema operacional não suportado para abrir o editor de texto.", "Erro", JOptionPane.ERROR_MESSAGE);
            }

        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao abrir o editor de texto: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_openDocumentBActionPerformed

    private void dataCHBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataCHBActionPerformed
        // TODO add your handling code here:

        if (dataCHB.isSelected()) {
            dataInicialFTF.setEnabled(true);
            dataFinalFTF.setEnabled(true);
            filtrarB.setEnabled(true);
        } else {
            dataInicialFTF.setEnabled(false);
            dataFinalFTF.setEnabled(false);
            filtrarB.setEnabled(false);
        }
    }//GEN-LAST:event_dataCHBActionPerformed

    private void levelSLStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_levelSLStateChanged
        // TODO add your handling code here:
        System.out.println(levelSL.getValue());
        switch (levelSL.getValue()) {
            case 1:
                levelL.setText("Level: Fine");
                break;
            case 2:
                levelL.setText("Level: Info");
                break;
            case 3:
                levelL.setText("Level: Warning");
                break;
            case 4:
                levelL.setText("Level: Error");
                break;
            case 5:
                levelL.setText("Level: Severe");
                break;
            // ...
            default:
                levelL.setText("Level: Debug");
        }
        filterDisplayResults();

    }//GEN-LAST:event_levelSLStateChanged

    private void areaFocoRHostMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_areaFocoRHostMouseExited
        // TODO add your handling code here:
        remoteHostFundo.setBorder(new RoundedBorder(Color.GRAY, 1, 20));
    }//GEN-LAST:event_areaFocoRHostMouseExited

    private void areaFocoRHostMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_areaFocoRHostMouseEntered
        // TODO add your handling code here:
        // remoteHostFundo.setBorder(BorderFactory.createLineBorder(Color.BLUE, 3));
        remoteHostFundo.setBorder(new RoundedBorder(Color.BLUE, 3, 20)); // 20 = quão arredondado fica
    }//GEN-LAST:event_areaFocoRHostMouseEntered

    private void filtrarBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtrarBActionPerformed
        // TODO add your handling code here:
        filterDisplayResults();
    }//GEN-LAST:event_filtrarBActionPerformed

    private void workspaceCBXMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_workspaceCBXMouseEntered
        // TODO add your handling code here:
        setTextInfoButton("Essa opção persiste informações dessa área de trabalho.");

    }//GEN-LAST:event_workspaceCBXMouseEntered

    private void workspaceCBXMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_workspaceCBXMouseExited
        // TODO add your handling code here:
        defaultInfoButtonTxt();
    }//GEN-LAST:event_workspaceCBXMouseExited

    private void rHostTFMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rHostTFMouseExited
        // TODO add your handling code here:
        defaultInfoButtonTxt();
    }//GEN-LAST:event_rHostTFMouseExited

    private void rHostPortTFMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rHostPortTFMouseExited
        // TODO add your handling code here:
        defaultInfoButtonTxt();
    }//GEN-LAST:event_rHostPortTFMouseExited

    private void dataCHBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataCHBMouseEntered
        // TODO add your handling code here:
        setTextInfoButton("Ativar/Desativar filtros por datas.");
    }//GEN-LAST:event_dataCHBMouseEntered

    private void dataCHBMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataCHBMouseExited
        // TODO add your handling code here:
        defaultInfoButtonTxt();
    }//GEN-LAST:event_dataCHBMouseExited

    private void levelSLMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_levelSLMouseEntered
        // TODO add your handling code here:
        setTextInfoButton("Defina o nível de Log a ser exibido no ConsoleLog.");
    }//GEN-LAST:event_levelSLMouseEntered

    private void levelSLMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_levelSLMouseExited
        // TODO add your handling code here:
        defaultInfoButtonTxt();
    }//GEN-LAST:event_levelSLMouseExited

    private void dataInicialFTFMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataInicialFTFMouseEntered
        // TODO add your handling code here:
        setTextInfoButton("Defina uma data inicial para filtrar os logs.");
    }//GEN-LAST:event_dataInicialFTFMouseEntered

    private void dataFinalFTFMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataFinalFTFMouseEntered
        // TODO add your handling code here:
        setTextInfoButton("Defina uma data final para filtrar os logs.");
    }//GEN-LAST:event_dataFinalFTFMouseEntered

    private void dataInicialFTFMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataInicialFTFMouseExited
        // TODO add your handling code here:
        defaultInfoButtonTxt();
    }//GEN-LAST:event_dataInicialFTFMouseExited

    private void dataFinalFTFMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataFinalFTFMouseExited
        // TODO add your handling code here:
        defaultInfoButtonTxt();
    }//GEN-LAST:event_dataFinalFTFMouseExited

    private void filtrarBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filtrarBMouseEntered
        // TODO add your handling code here:
        setTextInfoButton("Utilize essa opção para filtrar os registros do ConsoleLog.");
    }//GEN-LAST:event_filtrarBMouseEntered

    private void copyBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_copyBMouseEntered
        // TODO add your handling code here:
        setTextInfoButton("Copiar registros do ConsoleLog para área de transferência.");
    }//GEN-LAST:event_copyBMouseEntered

    private void copyBMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_copyBMouseExited
        // TODO add your handling code here:
        defaultInfoButtonTxt();
    }//GEN-LAST:event_copyBMouseExited

    private void eraserBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eraserBMouseEntered
        // TODO add your handling code here:
        setTextInfoButton("Apagar todos os registros do consoleLog.");
    }//GEN-LAST:event_eraserBMouseEntered

    private void exportBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportBMouseEntered
        // TODO add your handling code here:
        setTextInfoButton("Exportar registros do ConsoleLog para um arquivo de textos.");
    }//GEN-LAST:event_exportBMouseEntered

    private void openDocumentBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openDocumentBMouseEntered
        // TODO add your handling code here:
        setTextInfoButton("Abrir o editor de textos padrão com os registros do consoleLog");
    }//GEN-LAST:event_openDocumentBMouseEntered

    private void editTBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editTBMouseEntered
        // TODO add your handling code here:
        setTextInfoButton("Ativar/Desativar o modo editor do ConsoleLog.");
    }//GEN-LAST:event_editTBMouseEntered

    private void eraserBMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eraserBMouseExited
        // TODO add your handling code here:
        defaultInfoButtonTxt();
    }//GEN-LAST:event_eraserBMouseExited

    private void exportBMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportBMouseExited
        // TODO add your handling code here:
        defaultInfoButtonTxt();
    }//GEN-LAST:event_exportBMouseExited

    private void openDocumentBMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openDocumentBMouseExited
        // TODO add your handling code here:
        defaultInfoButtonTxt();
    }//GEN-LAST:event_openDocumentBMouseExited

    private void editTBMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editTBMouseExited
        // TODO add your handling code here:
        defaultInfoButtonTxt();
    }//GEN-LAST:event_editTBMouseExited

    private void campoPesquisaTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoPesquisaTFActionPerformed
        // TODO add your handling code here:
        campoPesquisaTF.setFont(new java.awt.Font("SansSerif", 1, 16));
    }//GEN-LAST:event_campoPesquisaTFActionPerformed

    private void campoPesquisaTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_campoPesquisaTFMouseClicked
        // TODO add your handling code here:
        if (isBarraPesquisaPrimeiroAcesso()) {
            campoPesquisaTF.setText("");
            campoPesquisaTF.setFont(new java.awt.Font("SansSerif", 4, 16));
            setBarraPesquisaPrimeiroAcesso(false);
        }
    }//GEN-LAST:event_campoPesquisaTFMouseClicked

    private void campoPesquisaTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoPesquisaTFKeyReleased
        // TODO add your handling code here:
        searchBarAction();
    }//GEN-LAST:event_campoPesquisaTFKeyReleased

    private void campoPesquisaTFMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_campoPesquisaTFMouseEntered
        // TODO add your handling code here:
        setTextInfoButton("Utilize essa opção para pesquisar informações no conteúdo dos registros.");
    }//GEN-LAST:event_campoPesquisaTFMouseEntered

    private void campoPesquisaTFMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_campoPesquisaTFMouseExited
        // TODO add your handling code here:
        defaultInfoButtonTxt();
    }//GEN-LAST:event_campoPesquisaTFMouseExited

    private void playLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playLMouseClicked
        fundoPlayAction();
    }//GEN-LAST:event_playLMouseClicked

    private void homeLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeLMouseClicked
        fundoHomeAction();
    }//GEN-LAST:event_homeLMouseClicked

    private void homeLMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeLMouseEntered
        setTextInfoButton("Utilize essa opção para retornar ao menu do sistema.");
        fundoHomeL.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
    }//GEN-LAST:event_homeLMouseEntered

    private void playLMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playLMouseEntered
        fundoPlayL.setBorder(new RoundedBorder(Color.BLUE, 3, 20));
        setTextInfoButton("Utilize essa opção para estabelecer comunicação com o servidor destino.");
    }//GEN-LAST:event_playLMouseEntered

    private void workspaceCBXItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_workspaceCBXItemStateChanged
        carregarInformacoes();
    }//GEN-LAST:event_workspaceCBXItemStateChanged

    private void addMonitoringLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMonitoringLMouseClicked
        fundoAddMonitoringAction();
    }//GEN-LAST:event_addMonitoringLMouseClicked

    private void fundoAddMonitoringLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoAddMonitoringLMouseClicked
        fundoAddMonitoringAction();
    }//GEN-LAST:event_fundoAddMonitoringLMouseClicked

    private void dataCHBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_dataCHBStateChanged
        persistirInformacoes();
    }//GEN-LAST:event_dataCHBStateChanged

    private void dataInicialFTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dataInicialFTFKeyReleased
        persistirInformacoes();
    }//GEN-LAST:event_dataInicialFTFKeyReleased

    private void dataFinalFTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dataFinalFTFKeyReleased
        persistirInformacoes();
    }//GEN-LAST:event_dataFinalFTFKeyReleased

    private void fundoPromptLMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoPromptLMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_fundoPromptLMouseEntered

    private void fundoPromptLMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fundoPromptLMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_fundoPromptLMouseExited

    private void promptTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_promptTFFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_promptTFFocusGained

    private void promptTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_promptTFMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_promptTFMouseClicked

    private void promptTFMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_promptTFMouseEntered
        // TODO add your handling code here:
        setTextInfoButton("Informe a instrução que será encaminhada ao servidor remoto.");
    }//GEN-LAST:event_promptTFMouseEntered

    private void promptTFMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_promptTFMouseExited
        defaultInfoButtonTxt();
    }//GEN-LAST:event_promptTFMouseExited

    private void promptTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_promptTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_promptTFActionPerformed

    private void promptTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_promptTFKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_promptTFKeyReleased

    private void defaultInfoButtonTxt() {
        setTextInfoButton("Selecione uma das opções abaixo.");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(TelnetUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        // Inicia a UI na thread de eventos do Swing
        java.awt.EventQueue.invokeLater(() -> {
            new TelnetUI().setVisible(true);
        });
    }

    private void initImg() {
        //ScaledImages
        LoadingLineLeftL.setVisible(false);
        LoadingLineRightL.setVisible(false);
        addMonitoringL.setEnabled(false);
        remoteHostFundo.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
        fundoPlayL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
        fundoAddMonitoringL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
        fundoRecycleBinL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
        fundoHomeL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
        fundoFiltroL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
        fundoToolbarL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));
        fundoConsoleLogL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 2, 20));
        fundoControleL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 2, 20));
        fundoPromptL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 2, 20));
        fundoUIL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 2, 20));
        fundoPesquisaL.setBorder(new RoundedBorder(Color.LIGHT_GRAY, 1, 20));

        campoPesquisaTF.setBorder(new RoundedBorder(Color.GRAY, 2, 30)); // Arredondado
        campoPesquisaTF.setOpaque(false); //
        campoPesquisaTF.setPreferredSize(new Dimension(300, 35)); // Tamanho desejado

        Image systemLogo;
        switch (HostConfig.obterSistemaOperacional()) {
            case "Windows":
                systemLogo = this.getScaledImage("imgs/hostWindows.png", systemL, true);
                break;

            case "Linux":
                systemLogo = this.getScaledImage("imgs/hostLinux.png", systemL, true);
                break;

            case "Mac":
                systemLogo = this.getScaledImage("imgs/hostMac.png", systemL, true);
                break;

            default:
                systemLogo = this.getScaledImage("imgs/host.png", systemL, true);
                break;
        }

        Image serverLogo = this.getScaledImage("imgs/server_static.png", remoteHostL, true);
        Image playLogo = this.getScaledImage("imgs/play_Icon.png", playL, true);
        Image addMonitoringLogo = this.getScaledImage("imgs/addMonitoring.png", addMonitoringL, true);
        Image homeLogo = this.getScaledImage("imgs/home_Icon.png", homeL, true);
        Image recycleBinIcon = this.getScaledImage("imgs/recicleByn_Icon.png", RecycleBinL, true);
        Image searchIcon = this.getScaledImage("imgs/search_Icon.png", searchL, true);

        Image LoadingLineRightIcon = this.getScaledImage("imgs/line.gif", LoadingLineLeftL, false);
        Image LoadingLineLeftIcon = this.getScaledImage("imgs/lineR.gif", LoadingLineRightL, false);

        Image exportFileIcon = this.getScaledImage("imgs/export_Icon.png", exportB, true);
        Image eraserIcon = this.getScaledImage("imgs/eraser.png", eraserB, true);
        Image copyIcon = this.getScaledImage("imgs/copy.png", copyB, true);
        Image editorIcon = this.getScaledImage("imgs/edit_Icon.png", editTB, true);
        Image openDocumentIcon = this.getScaledImage("imgs/notepad_Icon.png", openDocumentB, true);

        Image infoButtonIcon = this.getScaledImage("imgs/info_Button.png", InfoL, true);

        setScaledImage(remoteHostL, serverLogo);
        setScaledImage(systemL, systemLogo);
        setScaledImage(searchL, homeLogo);

        setScaledImage(playL, playLogo);
        setScaledImage(addMonitoringL, addMonitoringLogo);
        setScaledImage(homeL, homeLogo);
        setScaledImage(RecycleBinL, recycleBinIcon);
        setScaledImage(searchL, searchIcon);

        setScaledImage(LoadingLineLeftL, LoadingLineRightIcon);
        setScaledImage(LoadingLineRightL, LoadingLineLeftIcon);

        setScaledImage(exportB, exportFileIcon);
        setScaledImage(eraserB, eraserIcon);
        setScaledImage(copyB, copyIcon);
        setScaledImage(editTB, editorIcon);
        setScaledImage(openDocumentB, openDocumentIcon);

        setScaledImage(InfoL, infoButtonIcon);
    }

    private void addLog(LogLevel level, String input) {
        logTA.setText(logTA.getText() + "\n" + getLogFormat(level, input));
        addToArray(input, level);
    }

    private void addToArray(String input, LogLevel level) {

        LogOccurrenceModule log = new LogOccurrenceModule(input, level);
        this.LogArray.add(log);
    }

    private void addToArray(ArrayList<LogOccurrenceModule> logArray) {

        for (LogOccurrenceModule log : logArray) {
            this.LogArray.add(log);
        }
    }

    private void searchBarAction() {
        StringBuilder resultado = new StringBuilder("ConsoleLog");

        for (LogOccurrenceModule log : LogArray) {
            if (log.getData().toLowerCase().contains(campoPesquisaTF.getText().trim().toLowerCase())) {
                resultado.append("\n").append(HostConfig.getLogFormatFromLogOccurrence(log));
            }
        }
        logTA.setText(resultado.toString());
    }

    private void filterDisplayResults() {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss"); // <-- Aqui está o ajuste
        logTA.setText("ConsoleLog:");

        if (dataCHB.isSelected()) {
            try {
                Date dataInicial = sdf.parse(dataInicialFTF.getText());
                Date dataFinal = sdf.parse(dataFinalFTF.getText());

                for (LogOccurrenceModule log : LogArray) {
                    if (permitirLogGeracao(log.getSeverity())) {
                        Date dataLog = log.getOccurrence();
                        if (dataLog != null && !dataLog.before(dataInicial) && !dataLog.after(dataFinal)) {
                            logTA.setText(logTA.getText() + "\n" + HostConfig.getLogFormatFromLogOccurrence(log));
                        }
                    }
                }
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(this, "Por favor, preencha corretamente as datas nos campos!", "Data inválida", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            for (LogOccurrenceModule log : LogArray) {
                if (permitirLogGeracao(log.getSeverity())) {
                    logTA.setText(logTA.getText() + "\n" + HostConfig.getLogFormatFromLogOccurrence(log));
                }
            }
        }
    }

    private void setTextInfoButton(String input) {
        userInfoL.setText(input);
        ajustarTamanhoLabel(userInfoL);
        userInfoL.setBounds(obterPosicaoCentralEixoX(), userInfoL.getY(), userInfoL.getPreferredSize().width, userInfoL.getPreferredSize().height);
        InfoL.setBounds(obterPosicaoCentralEixoX() - 35, userInfoL.getY(), userInfoL.getPreferredSize().width, userInfoL.getPreferredSize().height);
    }

    private int obterPosicaoCentralEixoX() {
        int frameWidth = getWidth(); // largura da janela
        int labelWidth = userInfoL.getPreferredSize().width;
        int labelX = (frameWidth - labelWidth) / 2;
        return labelX;
    }

    private void ajustarTamanhoLabel(javax.swing.JLabel lbl) {
        FontMetrics metrics = lbl.getFontMetrics(lbl.getFont());
        int larguraTexto = metrics.stringWidth(lbl.getText());
        int alturaTexto = metrics.getHeight();

        // Margens para não ficar muito justo
        int margemHorizontal = 20;
        int margemVertical = 10;

        lbl.setSize(larguraTexto + margemHorizontal, alturaTexto + margemVertical);
    }

    public boolean permitirLogGeracao(LogLevel nivelGerado) {
        return nivelGerado.getPrioridade() >= (levelSL.getValue() + 1);
    }

    private Image getScaledImage(String directory, javax.swing.JLabel label, boolean scaled) {
        ImageIcon icon = new ImageIcon(getClass().getClassLoader().getResource(directory));
        Image image = icon.getImage();

        if (scaled) {
            Image ScaledImage = image.getScaledInstance(label.getWidth(), label.getHeight(), Image.SCALE_SMOOTH);
            return ScaledImage;
        } else {
            return image;
        }
    }

    private Image getScaledImage(String directory, javax.swing.JButton label, boolean scaled) {
        ImageIcon icon = new ImageIcon(getClass().getClassLoader().getResource(directory));
        Image image = icon.getImage();

        if (scaled) {
            Image ScaledImage = image.getScaledInstance(label.getWidth() - 10, label.getHeight() - 10, Image.SCALE_SMOOTH);
            return ScaledImage;
        } else {
            return image;
        }
    }

    private Image getScaledImage(String directory, javax.swing.JToggleButton label, boolean scaled) {
        ImageIcon icon = new ImageIcon(getClass().getClassLoader().getResource(directory));
        Image image = icon.getImage();

        if (scaled) {
            Image ScaledImage = image.getScaledInstance(label.getWidth() - 10, label.getHeight() - 10, Image.SCALE_SMOOTH);
            return ScaledImage;
        } else {
            return image;
        }
    }

    private void setScaledImage(javax.swing.JLabel label, Image image) {
        label.setIcon(new javax.swing.ImageIcon(image));
    }

    private void setScaledImage(javax.swing.JToggleButton label, Image image) {
        label.setIcon(new javax.swing.ImageIcon(image));
    }

    private void setScaledImage(javax.swing.JButton label, Image image) {
        label.setIcon(new javax.swing.ImageIcon(image));
    }

    private void inicializaFTF() {
        // Máscara: dd/MM/yyyy HH:mm:ss
        MaskFormatter dateMask = null;

        try {
            dateMask = new MaskFormatter("##/##/#### ##:##:##");
        } catch (ParseException ex) {
            Logger.getLogger(LoginForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        dateMask.setPlaceholderCharacter('_');

        dataInicialFTF.setColumns(20);
        dataInicialFTF.setFormatterFactory(new DefaultFormatterFactory(dateMask));
        dataFinalFTF.setColumns(20);
        dataFinalFTF.setFormatterFactory(new DefaultFormatterFactory(dateMask));
    }

    public void persistirInformacoes() {
        TelnetConfig config = new TelnetConfig();
        config.workspace = String.valueOf(workspaceCBX.getSelectedItem());
        config.session = new TelnetConfig.SessionValues();
        config.session.considerarData = dataCHB.isSelected();
        config.session.dataFinal = dataFinalFTF.getText();
        config.session.dataInicial = dataInicialFTF.getText();
        config.session.executar = fundoPlayL.isEnabled();
        config.session.filtrar = fundoFiltroL.isEnabled();
        config.session.home = fundoHomeL.isEnabled();
        config.session.level = levelSL.getValue();
        config.session.lixeira = fundoRecycleBinL.isEnabled();
        config.session.monitorar = addMonitoringL.isEnabled();
        config.session.porta = rHostPortTF.getText();
        config.session.servidor = rHostTF.getText();
        config.session.instrucao = promptTF.getText();
        config.session.toggleEditor = editTB.isSelected();

        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        salvarJsonEmAppData("telnetConfig_wk" + String.valueOf(workspaceCBX.getSelectedItem()) + ".json", gson.toJson(config), "/Persistence/Modules");
    }

    public void carregarInformacoes() {
        String nomeArquivo = "telnetConfig_wk" + String.valueOf(workspaceCBX.getSelectedItem()) + ".json";
        TelnetConfig config = JsonPersistence.carregarJsonAppdata(nomeArquivo, TelnetConfig.class, "/Persistence/Modules");

        if (config == null || config.session == null) {
            System.out.println("Arquivo de configuração não encontrado ou inválido: " + nomeArquivo);
            return;
        }

        try {
            dataCHB.setSelected(config.session.considerarData);
            fundoPlayL.setEnabled(config.session.executar);
            fundoFiltroL.setEnabled(config.session.filtrar);
            fundoHomeL.setEnabled(config.session.home);
            levelSL.setValue(config.session.level);
            fundoRecycleBinL.setEnabled(config.session.lixeira);
            addMonitoringL.setEnabled(config.session.monitorar);
            rHostPortTF.setText(config.session.porta);
            rHostTF.setText(config.session.servidor);
            promptTF.setText(config.session.instrucao);
            editTB.setSelected(config.session.toggleEditor);
        } catch (Exception e) {
            System.err.println("Erro ao carregar valores do JSON para os componentes: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public void addMonitoring() {
        String nomeArquivo = "Monitoring.json";
        String workspace = "TELNET";

        Worker1Persistence.SessionValues novoMonitoramento = new Worker1Persistence.SessionValues();
        novoMonitoramento.telnet_Instrucao = promptTF.getText();
        novoMonitoramento.telnet_Porta = rHostPortTF.getText();
        novoMonitoramento.telnet_Servidor = rHostPortTF.getText();

        List<Worker1Persistence> listaMonitoramento = JsonPersistence.carregarJsonAppdataMonitoramento(nomeArquivo);
        if (listaMonitoramento == null) {
            listaMonitoramento = new ArrayList<>();
        }

        JsonPersistence.adicionarMonitoramentoAoJson(nomeArquivo, workspace, novoMonitoramento);
        JOptionPane.showMessageDialog(null, "Monitoramento adicionado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
    }

    public boolean isBarraPesquisaPrimeiroAcesso() {
        return barraPesquisaPrimeiroAcesso;
    }

    public void setBarraPesquisaPrimeiroAcesso(boolean barraPesquisaPrimeiroAcesso) {
        this.barraPesquisaPrimeiroAcesso = barraPesquisaPrimeiroAcesso;
    }

    private void inicializarPortasPadrao() {
        portasPadrao.put(0, "20");    // FTP
        portasPadrao.put(1, "22");    // SSH
        portasPadrao.put(2, "23");    // Telnet
        portasPadrao.put(3, "25");    // SMTP
        portasPadrao.put(4, "80");    // HTTP
        portasPadrao.put(5, "110");   // POP3
        portasPadrao.put(6, "143");   // IMAP
        portasPadrao.put(7, "443");   // HTTPS
        portasPadrao.put(8, "445");   // SMB
        portasPadrao.put(9, "465");   // SMTP com SSL/TLS
        portasPadrao.put(10, "587");  // SMTP com STARTTLS
        portasPadrao.put(11, "993");  // IMAP com SSL/TLS
        portasPadrao.put(12, "995");  // POP3 com SSL/TLS
        portasPadrao.put(13, "1433"); // SQL Server
        portasPadrao.put(14, "1521"); // Oracle DB
        portasPadrao.put(15, "3306"); // MySQL/MariaDB
        portasPadrao.put(16, "3389"); // RDP
        portasPadrao.put(17, "5432"); // PostgreSQL
        portasPadrao.put(18, "5900"); // VNC
        portasPadrao.put(19, "8080"); // HTTP alternativo
        portasPadrao.put(20, "67");   // DHCP
        portasPadrao.put(21, "69");   // TFTP
        portasPadrao.put(22, "123");  // NTP
        portasPadrao.put(23, "161");  // SNMP
        portasPadrao.put(24, "514");  // Syslog
        portasPadrao.put(25, "53");   // DNS
        portasPadrao.put(26, "389");  // LDAP
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel InfoL;
    private javax.swing.JLabel LoadingLineLeftL;
    private javax.swing.JLabel LoadingLineRightL;
    private javax.swing.JLabel RecycleBinL;
    private javax.swing.JLabel addMonitoringL;
    private javax.swing.JLabel areaFocoRHost;
    private javax.swing.JTextField campoPesquisaTF;
    private javax.swing.JButton copyB;
    private javax.swing.JCheckBox dataCHB;
    private javax.swing.JFormattedTextField dataFinalFTF;
    private javax.swing.JFormattedTextField dataInicialFTF;
    private javax.swing.JLabel deL;
    private javax.swing.JToggleButton editTB;
    private javax.swing.JButton eraserB;
    private javax.swing.JButton exportB;
    private javax.swing.JButton filtrarB;
    private javax.swing.JLabel fundoAddMonitoringL;
    private javax.swing.JLabel fundoConsoleLogL;
    private javax.swing.JLabel fundoControleL;
    private javax.swing.JLabel fundoFiltroL;
    private javax.swing.JLabel fundoHomeL;
    private javax.swing.JLabel fundoPesquisaL;
    private javax.swing.JLabel fundoPlayL;
    private javax.swing.JLabel fundoPromptL;
    private javax.swing.JLabel fundoRecycleBinL;
    private javax.swing.JLabel fundoToolbarL;
    private javax.swing.JLabel fundoUIL;
    private javax.swing.JLabel homeL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel levelL;
    private javax.swing.JSlider levelSL;
    private javax.swing.JTextArea logTA;
    private javax.swing.JLabel nomeRHost;
    private javax.swing.JButton openDocumentB;
    private javax.swing.JLabel playL;
    private javax.swing.JLabel ppadraoL;
    private javax.swing.JTextField promptTF;
    private javax.swing.JTextField rHostPortTF;
    private javax.swing.JTextField rHostTF;
    private javax.swing.JLabel remoteHostFundo;
    private javax.swing.JLabel remoteHostL;
    private javax.swing.JLabel searchL;
    private javax.swing.JLabel systemL;
    private javax.swing.JLabel userInfoL;
    private javax.swing.JComboBox workspaceCBX;
    // End of variables declaration//GEN-END:variables

}
